*portal.nvim.txt*         For NVIM v0.8.0        Last change: 2022 December 12

==============================================================================
Table of Contents                              *portal.nvim-table-of-contents*

1. Portal.nvim                                       |portal.nvim-portal.nvim|
  - Introduction                                    |portal.nvim-introduction|
  - Features                                            |portal.nvim-features|
  - Requirements                                    |portal.nvim-requirements|
  - Installation                                    |portal.nvim-installation|
  - Default Settings                            |portal.nvim-default-settings|
  - Portals                                              |portal.nvim-portals|
  - Queries                                              |portal.nvim-queries|
  - Previewer                                          |portal.nvim-previewer|
  - Highlight Groups                            |portal.nvim-highlight-groups|
  - Integrations                                    |portal.nvim-integrations|
  - Inspiration                                      |portal.nvim-inspiration|

==============================================================================
1. Portal.nvim                                       *portal.nvim-portal.nvim*


  Look at you, sailing through the [jumplist] majestically, like an eagle…
  piloting a blimp.


------------------------------------------------------------------------------

<div class="figure">
<img src="https://user-images.githubusercontent.com/2467016/199164298-1083fdae-4d9c-480c-9962-41a853127e80.gif" title="fig:"/>
<p class="caption">portal_jump mov</p>
</div>

_Theme: catppuccin <https://github.com/catppuccin/nvim>_

INTRODUCTION                                        *portal.nvim-introduction*

Portal is a plugin that aims to build upon and enhance existing jumplist
motions (i.e. `<c-o>` and `<c-i>`) by surfacing contextual information with
the use of |portal.nvim-portals|, and providing multiple jump options by means
of |portal.nvim-queries|.

To get started, |portal.nvim-install| the plugin using your preferred package
manager, setup the plugin, add the suggested keybindings for portals and
tagging, and give it a go! Default settings for the plugin can be found in the
|portal.nvim-settings| section below

FEATURES                                                *portal.nvim-features*


- **Contextual** jumping with portals to view available jump locations
- **Customizable** jump queries to allow you to go anywhere you’d like in the jumplist
- **Persistent** jump tags to flag important file you want to be able to get back to
- **Integration** with grapple.nvim <https://github.com/cbochs/grapple.nvim> and harpoon <https://github.com/ThePrimeagen/harpoon> to provide additional queries


REQUIREMENTS                                        *portal.nvim-requirements*


- Neovim >= 0.5 <https://github.com/neovim/neovim/releases/tag/v0.5.0>
- Neovim >= 0.9 - optional, for floating window title <https://github.com/neovim/neovim/issues/17458>


INSTALLATION                                        *portal.nvim-installation*

PACKER <HTTPS://GITHUB.COM/WBTHOMASON/PACKER.NVIM> ~

>
    use {
        "cbochs/portal.nvim",
        requires = {
            "cbochs/grapple.nvim",  -- Optional: provides the "grapple" query item
            "ThePrimeagen/harpoon", -- Optional: provides the "harpoon" query item
        },
    }
<


PLUG <HTTPS://GITHUB.COM/JUNEGUNN/VIM-PLUG> ~

>
    Plug "cbochs/portal.nvim"
<


DEFAULT SETTINGS                                *portal.nvim-default-settings*

The following are the default settings for Portal. **Setup is not required**,
but settings may be overridden by passing them as table arguments to the
`portalsetup` function.

>
    require("portal").setup({
        ---@type "debug" | "info" | "warn" | "error"
        log_level = "warn",
    
        ---The default queries used when searching the jumplist. An entry can
        ---be a name of a registered query item, an anonymous predicate, or
        ---a well-formed query item. See Queries section for more information.
        ---@type Portal.QueryLike[]
        query = { "modified", "different", "valid" },
    
        ---An ordered list of keys that will be used for labelling available jumps.
        ---Labels will be applied in same order as `query`.
        ---@type string[]
        labels = { "j", "k", "h", "l" },
    
        ---Keys used for exiting portal selection. To disable a key, set its value
        ---to `nil` or `false`.
        ---@type table<string, boolean | nil>
        escape = {
            ["<esc>"] = true,
        },
    
        ---The jumplist is fixed at 100 items, which has the possibility to impact
        ---portal performance. Set this to a value less than 100 to limit the number
        ---of jumps in the jumplist that will be queried.
        lookback = 100,
    
        portal = {
            title = {
                --- When a portal is empty, render an default portal title
                render_empty = true,
    
                --- The raw window options used for the portal title window
                options = {
                    relative = "cursor",
                    width = 80,
                    height = 1,
                    col = 2,
                    style = "minimal",
                    focusable = false,
                    border = "single",
                    noautocmd = true,
                    zindex = 98,
                },
            },
    
            body = {
                -- When a portal is empty, render an empty buffer body
                render_empty = false,
    
                --- The raw window options used for the portal body window
                options = {
                    relative = "cursor",
                    width = 80,
                    height = 3,
                    col = 2,
                    focusable = false,
                    border = "single",
                    noautocmd = true,
                    zindex = 99,
                },
            },
        },
    })
<


PORTALS                                                  *portal.nvim-portals*

A **portal** is a window that displays the jump location, the label required to
get to that jump location, and any addition contextual information (i.e. the
jump’s file name or matched query).

<img width="1774" alt="Screen Shot 2022-11-01 at 14 02 18"
src="https://user-images.githubusercontent.com/2467016/199328505-ebd06a30-c931-4aa3-9828-d2970d811dfd.png">

SUGGESTED KEYMAPS ~

>
    vim.keymap.set("n", "<leader>o", require("portal").jump_backward, {})
    vim.keymap.set("n", "<leader>i", require("portal").jump_forward, {})
<


QUERIES                                                  *portal.nvim-queries*

A **query** is a list of **query items** which are used to identify specifc
jump locations in the jumplist. Each **query item** will attempt to match with
a jump location based on a given criteria.

For example, a query of `{ "modified", "different" }` will attempt to find two
jump locations. The first is where a jump’s buffer has been _modified_. The
second is where a jump’s buffer is _different_ than the current buffer.

>
    local query = { "modified", "different" }
    
    -- A query can be used in the context of jumping and passed in as an option
    -- or during setup
    require("portal").jump_forward({ query = query })
    
    -- A list of query-like items must be resolved into proper Portal.QueryItem's
    local resolved_query = require("portal.query").resolve(query)
    
    -- A search can be explicitly searched for, returning a list of Portal.Jump.
    -- Invalid jumps will have their direction field set to types.direction.none
    local available_jumps = require("portal.jump").search(query)
<


AVAILABLE QUERY ITEMS ~

All registered query items are available as table values from `query`. For
example, the query item for `"valid"` would be:

>
    require("portal.query").valid
<


                                                         *portal.nvim-`valid`*

`valid`                                Matches jumps that have a valid buffer
                                       (see: `:h nvim_buf_is_valid`).


                                                     *portal.nvim-`different`*

`different`                            Matches jumps that have a buffer
                                       different than the current buffer.


                                                      *portal.nvim-`modified`*

`modified`                             Matched jumps that are in a modified
                                       buffer (see `:h 'modified'`).


                                                        *portal.nvim-`custom`*

`custom`                               See how to create your own
                                       |portal.nvim-custom-query-items| and
                                       available |portal.nvim-integrations| for
                                       more information.


CUSTOM QUERY ITEMS ~

A **query item** found in the settings is in fact a "query-like" item. It may
be either a `string`, `Portal.Predicate`, or `Portal.QueryItem`. A string may
be used to specify a query item that has been _registered_. To register a
query, use `query.register` and pass in a key, predicate, and optional `name`
and `name_short`.

                                         *portal.nvim-Registering-query-items*

>
    ---Define the predicate
    ---@param jump Portal.Jump
    ---@return boolean
    local function is_listed(jump)
        return require("portal.query").valid(jump)
            and vim.fn.buflisted(jump.buffer)
    end
    
    -- Register the predicate with an associated key
    require("portal.query").register("listed", is_listed, {
        name = "Listed",
        name_short = "L",
    })
    
    -- Use the registered query item
    require("portal").jump_backward({
        query = { "listed" }
    })
<


                                           *portal.nvim-Anonymous-query-items*

Anonymous query items                  Anonymous query items may also be used
                                       instead of explicitly registering a
                                       query item.


>
    require("portal").jump_backward({
        query = {
            -- A query item may be an unnamed Portal.Predicate
            function(jump) ... end,
    
            -- A query item may be a well-formed, but unregistered, Portal.QueryItem
            {
                predicate = function(jump) ... end,
                type = "{type}" -- synomymous with a query item's "key"
                name = "{name}",
                name_short = "{name_short}"
            }
        }
    })
<


PREVIEWER                                              *portal.nvim-previewer*

**todo!(cbochs)**

HIGHLIGHT GROUPS                                *portal.nvim-highlight-groups*

A number of highlight groups are available to let you style your portals:

`PORTALBORDER` ~

The default window border placed around any open portal.

**Default**: `FloatBorder`

`PORTALBORDERBACKWARD` ~

The window border placed around an open portal when the jump direction is
backward.

**Default**: `PortalBorder`

`PORTALBORDERFORWARD` ~

The window border placed around an open portal when the jump direction is
forward.

**Default**: `PortalBorder`

`PORTALBORDERNONE` ~

The window border placed around an open portal when the jump direction is
forward.

**Default**: `PortalBorder`

`PORTALLABEL` ~

The label (extmark) placed next to a portal jump location.

**Default**: `{ bg = "a6e3a1", fg = "1e1e2e" }`

**Example**

>
    -- Give window borders a "portal" feel
    vim.api.nvim_set_hl(0, "PortalBorder", { fg = "fab387" })
    vim.api.nvim_set_hl(0, "PortalBorderNone", { fg = "89b4fa" })
<


INTEGRATIONS                                        *portal.nvim-integrations*

The following additional queries are automatically registered if their
associated plugin is found.

GRAPPLE.NVIM <HTTPS://GITHUB.COM/CBOCHS/GRAPPLE.NVIM> ~

**Query item**: `"grapple"`

Matches jumps that are in a buffer tagged by grapple.nvim
<https://github.com/cbochs/grapple.nvim>.

**Usage**

>
    require("portal").setup({
        query = { "grapple", ... }
    })
<


                 *portal.nvim-Jump-to-the-first-tagged-buffer-in-the-jumplist*

Jump to the first tagged buffer in the jumplist Use Portal and Grapple to jump
                                       directly to the first tagged buffer
                                       navigating backwards in the jumplist,
                                       without opening any portals.


>
    local query = require("portal.query").resolve({ "grapple" })
    local jumps = require("portal.jump").search(query, "backward")
    require("portal.jump").select(jumps[1])
<


HARPOON <HTTPS://GITHUB.COM/THEPRIMEAGEN/HARPOON> ~

**Query item**: `"harpoon"`

Matches jumps that are in a buffer marked by harpoon
<https://github.com/ThePrimeagen/harpoon>.

**Usage**

>
    require("portal").setup({
        query = { "harpoon", ... }
    })
<


INSPIRATION                                          *portal.nvim-inspiration*


- tjdevries vlog.nvim <https://github.com/tjdevries/vlog.nvim>
- ThePrimeagen’s harpoon <https://github.com/ThePrimeagen/harpoon>
- kwarlwang’s bufjump.nvim <https://github.com/kwkarlwang/bufjump.nvim>


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
